{
  "ppp": {
    "description": "Full PHP <?php ... ?>",
    "prefix": "ppp",
    "body": [ "<?php $0 ?>" ]
  },
  "echoif": {
    "prefix": "echoif",
    "description":  "PHP Echo If (expression)",
    "body": [ "$0echo $${1:var} ? $${2:$1} : '${3:nope}'" ]
  },
  "pecho" : {"prefix": "pecho","description":  "PHP Echo",
    "body": [ "<?php echo $1 ?>$0" ]
  },
  "rett" : {
    "prefix": "rett",
    "description": "return true;",
    "body": [ "return true;" ]
  },
  "retf" : {
    "prefix": "retf",
    "description": "return true;",
    "body": [ "return false;" ]
  },
  "phpcomm" : {
    "prefix": "phpcomm",
    "description":  "comment block",
    "body": [
      "/**",
      "* $1",
      "*/"
    ]
  },
  "redirect": {
    "prefix": "redirect",
    "description": "PHP Redirect Location",
    "body": [
      "header('Location: ${1:http://example.com/myOtherPage.php}');",
      "die();$0"
    ]
  },
  "phperr": {
    "prefix": "phperr",
    "description": "Add php dev errors for my ip",
    "body": [
      "if ($_SERVER['REMOTE_ADDR']=='107.189.218.58' || $_SERVER['DOCUMENT_ROOT']=='/var/www') {",
        "  error_reporting(E_ALL);",
        "  ini_set('display_errors', 1);",
        "  ini_set('display_startup_errors', 1);",
        "  $startTime = microtime(true);",
        "}"
    ]
  },
  "phptimer": {"prefix": "phptimer","description":  "Execution Timer For PHP",
    "body": [
      "$time_pre = microtime(true);",
      "exec(...);",
      "$time_post = microtime(true);",
      "$exec_time = $time_post - $time_pre;"
    ]
  },
  "diedark": {
    "prefix": "diedark",
    "description":  "DieDark",
    "body": [ "die('<style> body { background-color: #333; color:#EEE; }</style>');" ]
  },
  "GET": {
    "prefix": "GET",
    "description": "PHP get",
    "body": [ "$_GET['${1}']$0" ]
  },
  "POST": {
    "prefix": "POST",
    "description": "PHP post",
    "body": [ "$_POST['${1}']$0" ]
  },
  "SESS": {
    "prefix": "SESS",
    "description": "PHP session",
    "body": [ "$_SESSION['${1}']$0" ]
  },
  "strip": {
    "prefix": "strip",
    "description": "strip the nasties",
    "body": [ "preg_replace(\"#[^0-9a-z ~?&@/:._+=-]#i\", '', ${1:text});$0" ]
  },
  "risset": {
    "prefix": "risset",
    "description": "isset $_REQUEST/SESSION/POST/GET",
    "body": [ "\\$${1:var}=isset(\\$_${2:REQUEST}['${3:${1}}']) ? preg_replace('#[^0-9a-z ~?&@/:._+=-]#i', '', \\$_$2['$3']) : '';$0" ]
  },
  "visset": {
    "prefix": "visset",
    "description": "isset $variable",
    "body": [ "$$1=isset($${2:$1}) ? $$2 : '';$0" ]
  },
  "notissetorblank": {
    "prefix": "notissetorblank",
    "description": "!isset OR blank...",
    "body": [ "(!isset($1) || $1=='')$0" ]
  },
  "issetandnotblank": {
    "prefix": "issetandnotblank",
    "description":  "isset and not blank...",
    "body": [ "(isset($1) && $1!='')$0" ]
  },
  "cookieunset": {"prefix": "cookieunset","description":  "Unset cookie",
    "body": [ "setcookie(\"${1:cookie_name}\", '', time()-(60*60*24), \"/\");$0" ]
  },
  "cookie24h": {
    "prefix": "cookie24h",
    "description":  "set cookie for 24 hours",
    "body": [ "setcookie(\"${1:cookie_name}\", \"${2:cookie_value}\",  time()+86400); // 1 day$0" ]
  },
  "cookietoday": {
    "prefix": "cookietoday",
    "description":  "set cookie till midnight",
    "body": [ "setcookie(\"${1:cookie_name}\", \"${2:cookie_value}\", strtotime('today 23:59'), '/'); $0" ]
  },
  "ecv": {
    "prefix": "ecv",
    "description": "echo var: $var <br>",
    "body": [ "echo \"${1:var}: $$1 <br />\";$0" ]
  },
  "var equals": {
    "prefix": "$$",
    "description":  "PHP variable equal to something",
    "body": [ "\\$${1:var} ${2:= ${3:value}};" ]
  },
  "ternary": {
    "prefix": "=?:",
    "description":  "Inline Ternary: $var = true ? false : default",
    "body": [ "\\$${1:foo} = ${2:true} ? ${3:a} : ${0};" ]
  },
  "bad_usernames": {
    "prefix": "bad_usernames",
    "description":  "Bad Usernames Array",
    "body": [ "$bad_usernames = array('admin','administrator','default','house','sponsor','username','user','users','master','expired','yourusername','autoresponder','desiredusername', 'coop','member','members','rotator','random','account');" ]
  },
  "date-time now": {
    "prefix": "now",
    "description":  "PHP date, NOW",
    "body": [ "$now = date('Y-m-d H:i:s');" ]
  },
  "date-time": {
    "prefix": "date",
    "description":  "PHP date, NOW",
    "body": [ "$now = date('Y-m-d H:i:s', strtotime('${2:+}${3:5} ${4:day}'));" ]
  },
  "humandate": {
    "prefix": "humandate",
    "description":  "human readable date Jan 4th 20xx",
    "body": [ "date('M jS Y', strtotime('+7 day'))" ]
  },
  "inco": {
    "prefix": "inco",
    "description": "php include_once",
    "body": [ "include_once ('${1:${2:cfg}${3:.php}}');" ]
  },
  "reco": {
    "prefix": "reco",
    "description": "require_once",
    "body": [ "require_once '${1:file}';$0" ]
  },
  "vdd": {
    "prefix": "vdd",
    "description": "Var Dump & Die!",
    "body": [ "var_dump(${1}); die('${0:}');" ]
  },
  "string replace": {
    "prefix": "replace",
    "description": "str_replace",
    "body": [ "str_replace(${1:search}, ${2:replace}, ${3:subject})$0" ]
  },
  "find_exact": {
    "prefix": "find_exact",
    "description": "find in string with preg_match",
    "body": [ "if(preg_match('/${1:needle}(\\s|$|\\.|\\,)/', ${2:haystack})$0" ]
  },
  "find_broad": {
    "prefix": "find_broad",
    "description": "find in string with strrpos",
    "body": [ "if (stripos(${1:needle}, ${2:haystack})!==false)$0" ]
  },
  "in array": {
    "prefix": "inarray",
    "description": "in_array",
    "body": [ "in_array(${1:needle}, ${2:haystack})$0" ]
  },
  "key equals key": {
    "prefix": "kk",
    "description": "'key'=>$key,",
    "body": [ "'${1:name}' => $${2:$1},$0" ]
  },
  "kv": {
    "prefix": "kv",
    "description": "'key' => 'value',",
    "body": [ "'${1:key}' => '$${2:$1}',$0" ]
  },
  "keys to values": {
    "prefix": "k2v",
    "description": "foreach keys as values",
    "body": [ "foreach ($row as $key => $val) { $$key=$val; }" ]
  },
  "for": {
    "prefix": "for",
    "description": "for ($i = 0; $i < $count; $i++) { ... }",
    "body": [
      "for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {",
        "${0:${VISUAL}}",
        "}"
    ]
  },
  "fe": {
    "prefix": "fe",
    "description": "foreach ($var as $val) { .. }",
    "body": [
      "foreach ($${1:var} as $${2:val}) {",
        "${0:${VISUAL}}",
        "}"
    ]
  },
  "fekv": {
    "prefix": "fekv",
    "description": "foreach ($var as $key => $val) { .. }",
    "body": [
      "foreach ($${1:var} as $${2:key} => $${3:val}) {",
        "${0:${VISUAL}}",
        "}"
    ]
  },
  "fetbl": {
    "prefix": "fetbl",
    "description": "foreach table for troubleshooting",
    "body": [
      "$tbl='<table border=\"0\" cellspacing=\"2\" cellpadding=\"8\">';",
      "foreach ($${1:_POST} as $k => $v) {",
        "$k = urldecode(stripslashes($k));",
        "$v = urldecode(stripslashes($v));",
        "$tbl.='",
        "<tr>",
        "<td>'. urldecode(stripslashes($k)) .'</td>",
        "<td>'. urldecode(stripslashes($v)) .'</td>",
        "</tr>';",
        "}",
        "$tbl.='</table>';",
        "echo $tbl;",
        "die;"
    ]
  },
  "ifisset": {
    "prefix": "ifisset",
    "description": "if variable isset",
    "body": [
      "if (isset ($${1:var}) && $$1!='') {",
        "${0:${VISUAL}}",
        "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "basic if condition",
    "body": [
      "if (${1:/* condition */}) {",
        "${2:// code...}",
        "}",
        "$0"
    ]
  },
  "pifel": {
    "prefix": "pifel",
    "description": "<?php if..else..end",
    "body": [
      "<?php if (${1:$${2:loco} == ${3:true}}): ?>",
      "${4:${VISUAL}}",
      "<?php else: ?>",
      "$5",
      "<?php endif; ?>$0"
    ]
  },
  "ife": {
    "prefix": "ife",
    "description": "if else",
    "body": [
      "if (${1:/* condition */}) {",
        "${2:// code...}",
        "} else {",
        "${3:// code...}",
        "}",
        "$0"
    ]
  },
  "el": {
    "prefix": "el",
    "description": "else { ... }",
    "body": [
      "} else {",
      "${0:${VISUAL}}",
      "}"
    ]
},
"elif": {
  "prefix": "elif",
  "description": "elseif(condition) { ... }",
  "body": [
    "} elseif (${1}) {",
    "${0:${VISUAL}}",
    "}"
  ]
  },
  "pelse": {
    "prefix": "pelse",
    "description": "<?php else: ?>",
    "body": [
      "<?php endif; ?>$0"
    ]
  },
  "pend": {
    "prefix": "pend",
    "description": "<?php endif; ?>",
    "body": [
      "<?php endif; ?>$0"
    ]
  },
  "do": {
    "prefix": "do",
    "description": "do",
    "body": [
      "do {",
        "${0:VISUAL}",
        "} while (${1:/* condition */});"
    ]
  },
  "evenodd": {
    "prefix": "evenodd",
    "description": "even or odd logic",
    "body": [
      "if ($${1:number} % 2 === 0) {",
        "$0",
        "}"
    ]
  },
  "striparr": {
    "prefix": "striparr",
    "description": "preg_replace strip out bad words",
    "body": [
      "$nar=array(${1:'bad','words'});",
      "$yar=array(${2:'ok','replacements'});",
      "$${3:cleaned_string}=str_replace($nar, $yar, $${4:dirty_string});"
    ]
  },
  "xif": {
    "prefix": "xif",
    "description": "explode string contains delimiter",
    "body": [
      "$${1:array_name}=array();",
      "if (stripos(${2:string}, '${3:delimiter}')!==false) {",
        "$x=explode('$3', $2);",
        "foreach ($x as $v) {",
          "if (!in_array($v, $$1)) $$1[]=$v;",
          "}",
          "} else {",
          "if (!in_array($2, $$1) && $2!='') $$1[]=$2;",
          "}",
          "$0"
    ]
  },
  "cookiesetifnot": {
    "prefix": "cookiesetifnot",
    "description": "Set the cookie if it's not set yet",
    "body": [
      "if(isset($_COOKIE['${1:cookie_name}']) && $_COOKIE['$1']!='') {",
        "  setcookie('$1', '${2:cookie_value}');",
        "  // this is just a hack to make this accessible instantly:",
        "  $_COOKIE['$1'] = '$2';",
        "}$0"
    ]
  },
  "cnt": {
    "prefix": "cnt",
    "description": "my count function",
    "body": [
      "count_it($sql_con, \"SELECT ${1:id} FROM ${2:table} WHERE ${3:thing}='$${4:${3}}' ${5: AND ${6:thing}='$${7:${6}}'} ${8:LIMIT ${9:1}}\")$0"
    ]
  },
  "uvar": {
    "prefix": "uvar",
    "description": "my sql_var function for user_vars",
    "body": [
      "sql_var($sql_con, \"SELECT ${1:var1} FROM ${2:user_vars} WHERE ${3:user}='$${4:username}'${5: AND ${6:thing}='$${7:${6}}'}${8: LIMIT ${9:1}}\")$0"
    ]
  },
  "svar": {
    "prefix": "svar",
    "description": "my sql_var function",
    "body": [
      "sql_var($sql_con, \"SELECT ${1:id} FROM ${2:table} WHERE ${3:thing}='$${4:${3}}' AND ${5:thing}='$${6:${5}}'${7: LIMIT ${8:1}}\");$0"
    ]
  },
  "mail": {
    "prefix": "mail",
    "description": "PHP Mail",
    "body": [
      "mail(${1:to}, ${2:subject}, ${3:$message}, \\$header);"
    ]
  },
  "mailh": {
    "prefix": "mailh",
    "description": "PHP Mail With Headers",
    "body": [
      "\\$header.= 'X-Mailer: PHP/' . phpversion() . PHP_EOL;",
      "'MIME-Version: 1.0 '. PHP_EOL;",
      "\"From: ${1:\\$site_name} <${2:\\$support_email}>\"  . PHP_EOL;",
      "'Content-type: text/plain; charset=iso-8859-1' . PHP_EOL;",
      "'Content-Transfer-Encoding: 8bit' . PHP_EOL;",
      "mail(${3:\\$to}, ${4:\\$subject}, ${5:\\$message}, \\$header);"
    ]
  },
  "msgw": {
    "prefix": "msgw",
    "description": "koadstrap warning message",
    "body": [
      "$msg.='<div class=\"msg warning\">${1:Uh Oh...}</div>';"
    ]
  },
  "msgs": {
    "prefix": "msgs",
    "description": "koadstrap success message",
    "body": [
      "$msg.='<div class=\"msg success\">${1:Update Successful}</div>';"
    ]
  },
  "msge": {
    "prefix": "msge",
    "description": "koadstrap error message",
    "body": [
      "$msg.='<div class=\"msg error\">${1:Something Went Wrong...}</div>';"
    ]
  },
  "troublshooter": {
    "prefix": "troublshooter",
    "description": "echo stuff to table...",
    "body": [
      "// Post Troubleshooter: ",
      "// {{{",
        "if (count(${1:$_POST})>0) {",
          "  $tbl='<table border=\"0\" cellspacing=\"2\" cellpadding=\"8\">';",
          "  foreach ($1 as $k => $v) {",
            "    if (is_array($v)) {",
              "      // for one dimensinal array: $v=implode(' => ', $v);",
              "      $vx='';",
              "      foreach ($v as $v1 => $v2) $vx.=$v1.' => '. $v2 .' | ';",
              "      $v=$vx;",
              "    }",
              "    $tbl.='",
              "    <tr>",
              "    <td>'. $k .'</td>",
              "    <td>'. $v .'</td>",
              "    </tr>';",
              "  }",
              "  $tbl.='</table>';",
              "  echo $tbl;",
              "  die('<style> body { background-color: #333; color:#EEE; }</style>');",
              "}",
              "// }}}"
    ]
  },
  "posted": {
    "prefix": "posted",
    "description": "My Posted Function",
    "body": [ "$${1:var}=posted('$1');" ]
  },
  "escape": {
    "prefix": "escape",
    "description": "mysqli_real_escape_string",
    "body": [ "\\$$1=isset(\\$_${2:POST}['${3:$1}']) ? mysqli_real_escape_string($sql_con, \\$_$2['$3']) : '';$0" ]
  },
  "skv": {
    "prefix": "skv",
    "description": "simple SQL formated k=v for updates etc..",
    "body": [ "${1:var}='$${2:$1}'$0" ]
  },
  "svv": {
    "prefix": "svv",
    "description": "simple SQL formated k=v for updates etc..",
    "body": [ "${1:var}='$$1',$0" ]
  },
  "sqlnr": {
    "prefix": "sqlnr",
    "description": "mysqli_num_rows($result)",
    "body": [ "mysqli_num_rows(${1:$sql})$0" ]
  },
  "ifnr": {
    "prefix": "ifnr",
    "description": "mysqli_num_rows($result)",
    "body": [
      "if (mysqli_num_rows(${1:$sql})>0) {",
        "$0",
        "}"
    ]
  },
  "sqlarr": {
    "prefix": "sqlarr",
    "description": "Get array from SQL",
    "body": [
      "$sql=mysqli_query($sql_con, \"SELECT * FROM ${1:table} WHERE ${2:key}='$${3:$2}'\");",
      "$arr=mysqli_fetch_array($sql);",
      "\\$${4:val}=$arr['${5:$4}'];$0",
      "mysqli_free_result($sql);"
    ]
  },
  "sqlwhile": {
    "prefix": "sqlwhile",
    "description": "SQL array while loop",
    "body": [
      "\\$sql = mysqli_query(\\$sql_con, \"SELECT * FROM ${1:table} WHERE ${2:key}='$${3:$2}'\");",
      "while (\\$row = mysqli_fetch_array(\\$sql)) {",
        "\\$${4:val}=$row['${5:$4}'];$0",
        "}",
        "mysqli_free_result(\\$sql);"
    ]
  },
  "varr": {
    "prefix": "varr",
    "description": "$var=$arr['name'];",
    "body": [ "$${1:val}=$arr['${2:$1}'];$0" ]
  },
  "1a": {
    "prefix": "1a",
    "description": "$var=$arr['name'];",
    "body": [ "$${1:val}=$arr['${2:$1}'];$0" ]
  },
  "1r": {
    "prefix": "1r",
    "description": "$var=$row['name'];",
    "body": [ "$${1:val}=$row['${2:$1}'];$0" ]
  },
  "arow": {
    "prefix": "arow",
    "description": "$var=$row['name'];",
    "body": [ "$${1:val}=$row['${2:$1}'];$0" ]
  },
  "joinleft": {
    "prefix": "joinleft",
    "description": "SQL Join Left Query",
    "body": [
      "$qry=\"",
      "SELECT s.var2 AS location, s.var3 AS shipping, d.var2 AS discount",
      "FROM user_vars s",
      "LEFT JOIN user_vars d",
      "ON s.usr=d.usr AND d.thing='store-discount'",
      "WHERE s.usr='$customer' AND s.thing='stockist-info'\";",
      "ORDER BY s.id ASC"
    ]
  },
  "joinsql": {
    "prefix": "joinsql",
    "description": "SQL Join Query",
    "body": [
      "$qry=\"",
      "SELECT s.var2 AS location, s.var3 AS shipping, d.var2 AS discount",
      "FROM user_vars s",
      "JOIN user_vars d ON s.usr=d.usr AND d.thing='store-discount'",
      "WHERE s.usr='$customer' AND s.thing='stockist-info'\";"
    ]
  },
  "joinupdate": {
    "prefix": "joinupdate",
    "description": "SQL Join Update",
    "body": [
      "$upd=\"",
      "  UPDATE shopping_cart s",
      "  INNER JOIN",
      "  products p",
      "  ON s.pid=p.pid AND p.department='coupon_code' AND s.cart_id='$cart_id'",
      "  SET s.qty=0",
      "\";",
      "mysqli_query($sql_con, $upd);"
    ]
  },
  "dbcon": {
    "prefix": "dbcon",
    "description": "Database Connection",
    "body": [
      "$sql_con = myqli_connect(\"localhost\",\"${1:user}\",\"${2:pass}\",\"${3:table}\") or die (\"Failed To Connect!\");"
    ]
  },
  "insertm": {
    "prefix": "insertm",
    "description": "SQL Insert With Message",
    "body": [
      "$sql_update=mysqli_query($sql_con, \"INSERT INTO ${1:table} (${2:var1}, ${3:var2}) VALUES ('$${4:$2}', '$${5:$3}')\");$0",
      "if ($sql_update) $msg = '<div class=\"success msg\">Account Updated</div>';",
      "else $msg = '<div class=\"error msg\">Failed To Update...<br />Server Error, Please Try Again Later</div>';",
      "$0"
    ]
  },
  "insert": {
    "prefix": "insert",
    "description": "SQL Insert",
    "body": [ "mysqli_query($sql_con, \"INSERT INTO ${1:table} (${2:var1}, ${3:var2}) VALUES ('$${4:$2}', '$${5:$3}')\");$0" ]
  },
  "update": {
    "prefix": "update",
    "description": "SQL Update",
    "body": [
      "mysqli_query($sql_con, \"UPDATE ${1:table} SET ${2:key}='$${3:$2}' WHERE ${4:key}='$${5:$4}'\"); $0"
    ]
  },
  "updatem": {
    "prefix": "updatem",
    "description": "SQL Update With Message",
    "body": [
      "$sql_update=mysqli_query($sql_con, \"UPDATE ${1:table} SET ${2:key}='$${3:$2}' WHERE ${4:key}='$${5:$4}'\");",
      "if ($sql_update) $msg = '<div class=\"success msg\">Account Updated</div>';",
      "else $msg = '<div class=\"error msg\">Failed To Update...<br />Server Error, Please Try Again Later</div>';",
      "$0"
    ]
  },
  "ppo": {
    "prefix": "ppo",
    "description": "Open PHP",
    "body": [ "<?php" ]
  },
  "ppc": {
    "prefix": "ppc",
    "description":  "Close PHP",
    "body": [ "?>" ]
  }
}
